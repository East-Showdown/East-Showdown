
# ==== STATE SCOPES VARIABLES ====
# energy_population_consumption - потребление энергии населением
# energy_buildings_consumption - потребление энергии постройками
# energy_consumption - суммарное потребление энергии
#
# energy_generation - генерация энергии постройками
#
# energy_transfer_capacity - пропускная способность подстанций
# energy_free_transfer_capacity - свободная пропускная способность подстанций
#
# energy_netto - баланс энергии в области
# energy_netto_factor - множитель баланса энергии в области (процент обеспечения потребления)


# PREV is a COUNTRY scope
# THIS is STATE scope
precalculate_energy_state_tick = {
	if = { # Если в стейте поменялось потребление и генерация энергии постройками
		limit = { NOT = { check_variable = { prev_energy_gain_modifier = modifier@energy_gain_modifier } } }
		set_variable = { prev_energy_gain_modifier = modifier@energy_gain_modifier }

		calculate_energy_state_consumption = yes
		calculate_energy_state_generation = yes
	}

	# Суммируем расчитанные значения в переменные страны
	calculate_energy_country_state_consumption = yes
	calculate_energy_country_state_generation = yes
}

# PREV is a COUNTRY scope
# THIS is STATE scope
postcalculate_energy_state_tick = {	
	calculate_energy_state_transfer = yes
}






# PREV is COUNTRY
# THIS is STATE scope
#
# Считаем потребление энергии в стейте
calculate_energy_state_consumption = {
	###############################################
	# ================ Население ================ #
	###############################################

	# Сколько тратит население стейта
	set_variable = { energy_population_consumption = state_population_k }
	divide_variable = { energy_population_consumption = PREV.energy_population_k_consumption_divider }
	multiply_variable = { energy_population_consumption = PREV.energy_population_k_consumption_factor }

	# Умножаем потребление энергии населением на модификаторы
	set_variable = { energy_population_consumption_factor = 1 }
	add_to_variable = { energy_population_consumption_factor = modifier@energy_population_consumption_factor }
	multiply_variable = { energy_population_consumption = energy_population_consumption_factor }

	# Ограничиваем минимальное потребление энергии населением
	clamp_variable = { var = energy_population_consumption min = 0.001 }

	###############################################
	# ================ Постройки ================ #
	###############################################

	# Военные заводы
	set_variable = { energy_arms_factories_consumption = non_damaged_building_level@arms_factory }
	multiply_variable = { energy_arms_factories_consumption = PREV.energy_arms_factory_consumption_power }
	set_variable = { energy_buildings_consumption = energy_arms_factories_consumption }

	# Заводы боеприпасов
	set_variable = { energy_ammunition_plants_consumption = non_damaged_building_level@ammunition_plant }
	multiply_variable = { energy_ammunition_plants_consumption = PREV.energy_ammunition_plant_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_ammunition_plants_consumption }

	# Гражданские заводы
	set_variable = { energy_industrial_complexes_consumption = non_damaged_building_level@industrial_complex }
	multiply_variable = { energy_industrial_complexes_consumption = PREV.energy_industrial_complex_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_industrial_complexes_consumption }

	# Верфи
	set_variable = { energy_dockyards_consumption = non_damaged_building_level@dockyard }
	multiply_variable = { energy_dockyards_consumption = PREV.energy_dockyard_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_dockyards_consumption }

	# НПЗ
	set_variable = { energy_synthetic_refineries_consumption = non_damaged_building_level@synthetic_refinery }
	multiply_variable = { energy_synthetic_refineries_consumption = PREV.energy_synthetic_refinery_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_synthetic_refineries_consumption }

	
	######################################################
	# ================ Суммарный расход ================ #
	######################################################

	# Сумарные локальные затраты энергии
	set_variable = { energy_consumption = energy_population_consumption }
	add_to_variable = { energy_consumption = energy_buildings_consumption }
}

# PREV is COUNTRY
# THIS is STATE scope
#
# Считаем суммарное потребление энергии в стейте для страны
calculate_energy_country_state_consumption = {
	# Добавляем данные в общую энергосеть, к которой подключен стейт
	var:energy_system_tag = {
		# Общее потребление
		add_to_variable = { energy_consumption_power = PREV.energy_consumption }
		# Потребление по категориям
		add_to_variable = { energy_population_consumption_power = PREV.energy_population_consumption }
		add_to_variable = { energy_buildings_consumption_power = PREV.energy_buildings_consumption }

		# Детализация по постройкам
		add_to_variable = { energy_arms_factory_consumption_power = PREV.energy_arms_factories_consumption }
		add_to_variable = { energy_ammunition_plants_consumption_power = PREV.energy_ammunition_plants_consumption }
		add_to_variable = { energy_industrial_complexes_consumption_power = PREV.energy_industrial_complexes_consumption }
		add_to_variable = { energy_dockyards_consumption_power = PREV.energy_dockyards_consumption }
		add_to_variable = { energy_synthetic_refineries_consumption_power = PREV.energy_synthetic_refineries_consumption }
	}
}

# PREV is COUNTRY scope
# THIS is STATE scope
#
# Считаем генерацию энергии в стейте
calculate_energy_state_generation = {
	# АЭС
	set_variable = { energy_nuclear_power_plants_generation = non_damaged_building_level@nuclear_power_plant }
	multiply_variable = { energy_nuclear_power_plants_generation = PREV.energy_nuclear_power_plant_generation_power }
	set_variable = { energy_generation = energy_nuclear_power_plants_generation }
	
	# ТЭЦ
	set_variable = { energy_thermal_power_plants_generation = non_damaged_building_level@thermal_power_plant }
	multiply_variable = { energy_thermal_power_plants_generation = PREV.energy_thermal_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_thermal_power_plants_generation }

	# СЭС
	set_variable = { energy_solar_power_plants_generation = non_damaged_building_level@solar_power_plant }
	multiply_variable = { energy_solar_power_plants_generation = PREV.energy_solar_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_solar_power_plants_generation }

	# ВЭС
	set_variable = { energy_wind_power_plants_generation = non_damaged_building_level@wind_power_plant }
	multiply_variable = { energy_wind_power_plants_generation = PREV.energy_wind_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_wind_power_plants_generation }
	
	# ГЭС
	if = {
		# Если в стейте есть ГЭС
		limit = { check_variable = { energy_hydro_power_plant_all_units > 0 } }

		set_variable = { energy_hydro_power_plant_units_generation = energy_hydro_power_plant_operating_units }
		multiply_variable = { energy_hydro_power_plant_units_generation = energy_hydro_power_plant_unit_medium_generation_power }
		multiply_variable = { energy_hydro_power_plant_units_generation = PREV.energy_hydro_power_plant_unit_generation_factor }
		multiply_variable = { energy_hydro_power_plant_units_generation = energy_hydro_power_plant_unit_generation_factor }
		add_to_variable = { PREV.energy_hydro_power_plant_operating_units = energy_hydro_power_plant_operating_units	}
		add_to_variable = { PREV.energy_hydro_power_plant_units_generation = energy_hydro_power_plant_units_generation }
		add_to_variable = { energy_generation = energy_hydro_power_plant_units_generation }
	}
}

# PREV is COUNTRY scope
# THIS is STATE scope
#
# Считаем генерацию энергии в стейте
calculate_energy_country_state_generation = {
	if = { # Если есть какая-либо генерация в стейте
		limit = { check_variable = { energy_generation > 0 } }

		# Добавляем данные в общую энергосеть, к которой подключен стейт
		var:energy_system_tag = {
			# Общее потребление
			add_to_variable = { energy_generation_power = PREV.energy_generation }

			# Детализация по постройкам
			add_to_variable = { energy_nuclear_power_plants_generation_power = PREV.energy_nuclear_power_plants_generation }
			add_to_variable = { energy_thermal_power_plants_generation_power = PREV.energy_thermal_power_plants_generation }
			add_to_variable = { energy_solar_power_plants_generation_power = PREV.energy_solar_power_plants_generation }
			add_to_variable = { energy_wind_power_plants_generation_power = PREV.energy_wind_power_plants_generation }
			add_to_variable = { energy_hydro_power_plant_units_generation_power = PREV.energy_hydro_power_plant_units_generation }
		}
	}
}

# PREV is COUNTRY scope
# THIS is STATE scope
#
# Считаем передачу энергии в стейте
calculate_energy_state_transfer = {
	# Сколько передают подстанции
	set_variable = { energy_transfer_capacity = non_damaged_building_level@electrical_substation }
	multiply_variable = { energy_transfer_capacity = PREV.energy_substation_transfer_capacity_power }

	set_temp_variable = { temp_energy_transfer_capacity_big = non_damaged_building_level@electrical_substation_big }
	multiply_temp_variable = { temp_energy_transfer_capacity_big = PREV.energy_substation_big_transfer_capacity_power }
	add_to_variable = { energy_transfer_capacity = temp_energy_transfer_capacity_big }
	
	# Считаем свободную пропускную способность трансформаторов
	set_variable = { energy_free_transfer_capacity = energy_transfer_capacity }
	subtract_from_variable = { energy_free_transfer_capacity = energy_consumption }
}



# PREV is COUNTRY scope
# THIS is STATE scope
#
# 
postcalculate_energy_state_tick_old = {
	
	if = { # Если полностью использована пропускная способность трансформаторов		
		limit = { check_variable = { energy_free_transfer_capacity < 0 } }
		# Ограничиваем  генерацию энергии пропускной способностью
		set_variable = { generation_penalty = energy_free_transfer_capacity }
		divide_variable = { generation_penalty = energy_consumption }
		multiply_variable = { generation_penalty = energy_generation }

		add_to_variable = { energy_generation = generation_penalty }
		clamp_variable = { var = energy_generation min = 0 }
	
		# Считаем баланс энергии в стейте
		set_variable = { energy_netto = energy_generation }
		subtract_from_variable = { energy_netto = energy_consumption }
		add_to_variable = { PREV.energy_sum_local_shortages = energy_netto }

		# Высчитываем фактор обеспечения электричеством
		set_variable = { energy_netto_factor = energy_consumption }
		add_to_variable = { energy_netto_factor = energy_netto }
		divide_variable = { energy_netto_factor = energy_consumption }
	}
	# Иначе пропускная способность не использована полностью и она положительна
	else = {
		set_variable = { generation_penalty = 0 }
		# Считаем баланс энергии в стейте
		set_variable = { energy_netto = energy_generation }
		subtract_from_variable = { energy_netto = energy_consumption }

		add_to_variable = { PREV.energy_connected_consumption = energy_consumption }

		if = { # Высчитываем ограничение на импорт локальной энергии из энергосети страны
			limit = { check_variable = { energy_netto < 0 } }
			
			# Высчитываем, сколько из разницы в нетто энергии может быть передано электросетью
			set_variable = { energy_transfer_cap = energy_free_transfer_capacity }
			subtract_from_variable = { energy_transfer_cap = energy_netto }
			multiply_variable = { energy_transfer_cap = -1 }

			if = {
				limit = { check_variable = { 
					var = energy_transfer_cap 
					compare = less_than_or_equals 
					value = energy_netto 
				} }
				set_variable = { energy_transfer_cap = energy_netto }
			}
			else = { # Иначе подстанции не могут обеспечить полный импорт электроэнергии
				add_to_variable = { PREV.energy_sum_local_shortages = energy_netto }				
				subtract_from_variable = { PREV.energy_sum_local_shortages = energy_transfer_cap }
			}
		}
		# Высчитываем ограничение на экспорт локальной энергии в энергосеть страны
		else = {
			# Высчитываем, сколько из разницы в нетто энергии может быть передано электросетью
			set_variable = { energy_transfer_cap = energy_free_transfer_capacity }
			if = {
				limit = { check_variable = { energy_transfer_cap > energy_netto } }
				set_variable = { energy_transfer_cap = energy_netto }
			}
			subtract_from_variable = { energy_free_transfer_capacity = energy_transfer_cap }
		}

		# Выполняем передачу энергии между энергосетью страны в локальной энергосетью
		add_to_variable = { PREV.energy_netto = energy_transfer_cap }
		subtract_from_variable = { energy_netto = energy_transfer_cap }

		# Высчитываем фактор обеспечения электричеством
		set_variable = { energy_netto_factor = energy_consumption }
		add_to_variable = { energy_netto_factor = energy_netto }
		divide_variable = { energy_netto_factor = energy_consumption }
		clamp_variable = { var = energy_netto_factor min = 0 max = 1 }
	}
	
	# Эффект локального блекаута
	if = {
		limit = { check_variable = { energy_netto_factor < PREV.energy_blackout_treshold_factor } }

		add_dynamic_modifier = { modifier = energy_local_blackout }

		add_to_variable = { PREV.num_controlled_states_with_local_energy_blackout = 1 }
		add_to_variable = { PREV.energy_cutout_blackout_population_k = state_population_k }
		add_to_variable = { PREV.energy_blackout_arms_factories = non_damaged_building_level@arms_factory }
		add_to_variable = { PREV.energy_blackout_ammunition_plants = non_damaged_building_level@ammunition_plant }
		add_to_variable = { PREV.energy_blackout_industrial_complexes = non_damaged_building_level@industrial_complex }
		add_to_variable = { PREV.energy_blackout_dockyards = non_damaged_building_level@dockyard }
		add_to_variable = { PREV.energy_blackout_synthetic_refineries = non_damaged_building_level@synthetic_refinery }
	}
	else_if = {
		limit = { has_dynamic_modifier = { modifier = energy_local_blackout } }
		remove_dynamic_modifier = { modifier = energy_local_blackout }
	}
}