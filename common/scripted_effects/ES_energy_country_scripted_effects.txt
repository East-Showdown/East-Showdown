

# ==== COUNTRY SCOPES VARIABLES ====
# num_controlled_states_with_local_energy_blackout - количество областей с локальным блэкаутом
# energy_population_consumption - потребление энергии населением
# energy_buildings_consumption - потребление энергии постройками
# energy_consumption - суммарное потребление энергии
#
# energy_generation - генерация энергии постройками
#
# energy_netto - баланс энергии в стране
# energy_netto_factor - множитель баланса энергии в стране (процент обеспечения потребления)


init_country_energy_data = {
	set_variable = { energy_hydro_power_plant_unit_generation_factor = 1 }
	set_variable = { energy_nuclear_power_plant_generation_factor = 1 }
	set_variable = { energy_thermal_power_plant_generation_factor = 1 }
	set_variable = { energy_solar_power_plant_generation_factor = 1 }
	set_variable = { energy_wind_power_plant_generation_factor = 1 }
	set_variable = { energy_mobile_gas_turbine_power_plant_unit_generation_factor = 1 }
}


# THIS is country scope
precalculate_energy_in_country = {
	recalculate_country_energy_data = yes

	set_variable = { energy_sum_local_shortages = 0 }
	set_variable = { num_controlled_states_with_local_energy_blackout = 0 }
	
	set_variable = { energy_population_consumption = 0 }
	set_variable = { energy_buildings_consumption = 0 }
	
	set_variable = { energy_arms_factories_consumption = 0 }
	set_variable = { energy_ammunition_plants_consumption = 0 }
	set_variable = { energy_industrial_complexes_consumption = 0 }
	set_variable = { energy_dockyards_consumption = 0 }
	set_variable = { energy_synthetic_refineries_consumption = 0 }

	set_variable = { energy_consumption = 0 }
	set_variable = { energy_generation = 0 }
	
	set_temp_variable = { energy_import = 0 }	
	set_temp_variable = { energy_export = 0 }

	set_variable = { energy_netto = 0 }
	set_variable = { energy_connected_consumption = 0 }

	set_variable = { energy_cutout_blackout_population_k = 0 }
	set_variable = { energy_blackout_arms_factories = 0 }
	set_variable = { energy_blackout_ammunition_plants = 0 }
	set_variable = { energy_blackout_industrial_complexes = 0 }
	set_variable = { energy_blackout_dockyards = 0 }
	set_variable = { energy_blackout_synthetic_refineries = 0 }

	set_variable = { energy_hydro_power_plant_operating_units = 0 }
	set_variable = { energy_hydro_power_plant_units_generation = 0 }
}	


# THIS is country scope
recalculate_country_energy_data = {
	# ============ Население ============
	# Вместо множителя потребления меняем делитель потребления.
	# Это позволит вычислять значения с меньшими потерями точности
	set_variable = { energy_population_k_consumption_divider = global.energy_population_k_consumption_divider }
	set_variable = { energy_population_k_consumption_factor = global.energy_population_k_consumption_factor }

	set_temp_variable = { energy_population_consumption_factor_modifier = modifier@energy_population_consumption_factor }
	clamp_temp_variable = { var = energy_population_consumption_factor_modifier min = 0.1 }
	divide_variable = { energy_population_k_consumption_divider = energy_population_consumption_factor_modifier }

	
	# ============ Генерация постройками ============
	set_variable = { energy_nuclear_power_plant_generation_power = global.energy_nuclear_power_plant_generation_power }
	multiply_variable = { energy_nuclear_power_plant_generation_power = energy_nuclear_power_plant_generation_factor }
	multiply_variable = { energy_nuclear_power_plant_generation_power = modifier@energy_buldings_generation_factor }
	clamp_variable = { var = energy_nuclear_power_plant_generation_power min = 0 }

	set_variable = { energy_thermal_power_plant_generation_power = global.energy_thermal_power_plant_generation_power }
	multiply_variable = { energy_thermal_power_plant_generation_power = energy_thermal_power_plant_generation_factor }
	multiply_variable = { energy_thermal_power_plant_generation_power = modifier@energy_buldings_generation_factor }
	clamp_variable = { var = energy_thermal_power_plant_generation_power min = 0 }

	set_variable = { energy_solar_power_plant_generation_power = global.energy_solar_power_plant_generation_power }
	multiply_variable = { energy_solar_power_plant_generation_power = energy_solar_power_plant_generation_factor }
	multiply_variable = { energy_solar_power_plant_generation_power = modifier@energy_buldings_generation_factor }
	clamp_variable = { var = energy_solar_power_plant_generation_power min = 0 }

	set_variable = { energy_wind_power_plant_generation_power = global.energy_wind_power_plant_generation_power }
	multiply_variable = { energy_wind_power_plant_generation_power = energy_wind_power_plant_generation_factor }
	multiply_variable = { energy_wind_power_plant_generation_power = modifier@energy_buldings_generation_factor }
	clamp_variable = { var = energy_wind_power_plant_generation_power min = 0 }
	
	set_variable = { energy_mobile_gas_turbine_power_plant_unit_generation_power = global.energy_mobile_gas_turbine_power_plant_unit_generation_power }
	multiply_variable = { energy_mobile_gas_turbine_power_plant_unit_generation_power = energy_mobile_gas_turbine_power_plant_unit_generation_factor }
	multiply_variable = { energy_mobile_gas_turbine_power_plant_unit_generation_power = modifier@energy_buldings_generation_factor }
	clamp_variable = { var = energy_mobile_gas_turbine_power_plant_unit_generation_power min = 0 }

	# ============ Пропускная способность подстанций ============
	set_variable = { energy_substation_transfer_capacity_power = global.energy_substation_transfer_capacity_power }
	multiply_variable = { energy_substation_transfer_capacity_power = modifier@energy_substation_transfer_capacity_power }
	clamp_variable = { var = energy_substation_transfer_capacity_power min = 0 }

	set_variable = { energy_substation_big_transfer_capacity_power = global.energy_substation_big_transfer_capacity_power }
	multiply_variable = { energy_substation_big_transfer_capacity_power = modifier@energy_substation_big_transfer_capacity_power }
	clamp_variable = { var = energy_substation_big_transfer_capacity_power min = 0 }

	# ============ Пороговое значение блекаута ============
	set_variable = { energy_blackout_treshold_factor = global.energy_blackout_treshold_factor }
	multiply_variable = { energy_blackout_treshold_factor = modifier@energy_blackout_treshold_factor }
	clamp_variable = { var = energy_blackout_treshold_factor min = 0 }
}


# THIS is country scope
postcalculate_energy_in_country = {
	calculate_energy_country_generation = yes
	calculate_energy_country_offsite_generation = yes
	calculate_energy_country_consumption = yes
	calculate_energy_country_offsite_consumption = yes
	calculate_energy_country_import_export = yes

	# Высчитываем фактор обеспечения электричеством
	set_variable = { energy_netto_factor = energy_connected_consumption }
	add_to_variable = { energy_netto_factor = energy_netto }
	divide_variable = { energy_netto_factor = energy_connected_consumption }

	# Считаем дебафы от локальных блекаутов
	calculate_global_blackout_effects = yes

	# Эффект глобального блекаута
	if = {
		limit = { check_variable = { energy_netto_factor < energy_blackout_treshold_factor } }

		if = {
			limit = { NOT = { has_dynamic_modifier = { modifier = energy_global_blackout } } } # Для оптимизации проверять наличие нацдуха с глобальными блекаутами
			
			add_dynamic_modifier = { modifier = energy_global_blackout }
			every_controlled_state = {
				limit = { NOT = { has_dynamic_modifier = { modifier = energy_global_blackout } }}
				add_dynamic_modifier = { modifier = energy_global_blackout }
			}
		}
	}
	else_if =  {
		limit = { has_dynamic_modifier = { modifier = energy_global_blackout} } # Для оптимизации проверять отсутствие нацдуха с глобальными блекаутами
		
		remove_dynamic_modifier = { modifier = energy_global_blackout }
		# Снятие эффекта глобального блекаута	
		every_controlled_state = { 
			limit = { has_dynamic_modifier = { modifier = energy_global_blackout } }
			remove_dynamic_modifier = { modifier = energy_global_blackout }
		} 
	}
}

# THIS scope is country
calculate_global_blackout_effects = {
	# Высчитываем размер дэбафа
	subtract_from_variable = { energy_debuff_factor = energy_netto_factor }
	divide_temp_variable = { energy_debuff_factor = energy_blackout_treshold_factor }

	clamp_temp_variable = { var = energy_debuff_factor min = 0 max = 1 }

	# TODO Добавить каким-либо образом учёт всех других эффектов от модификаторов, чтобы можно было полностью отключать производство и т.п.

	# ===========================================
	# ======== Пояснения к формулам ниже ========
	# ===========================================

	# Текущая формула рассчета эффекта дебафа
	# x = f * (k_b/k_a) + e * f * ((k_a - k_b) / k_a)

	# где:
	# k_b - кол-во в блэкауте
	# k_a - кол-во всего доступного в стране
	# f - множитель максимального эффекта дебафа
	# e - множитель силы эффекта от глобального дебафа

	# Формулу можно сократить до:
	# x = (f / k_a) * (k_b + e * (k_a - k_b))

	# При переводе в последовательность операций, 
	# где игнорируется приоритет математических операций и 
	# операции выполняются слева направо, это будет выглядеть как:
	# x = (((k_a - k_b) * e + k_b) * f) / k_a
	
	# ===========================================
	# ===========================================
	# ===========================================

	# Обеспечение электроэнергией населения

	# Считаем, сколько населения сидит на отключениях по графикам
	set_variable = { energy_scheduled_blackout_population_k = max_manpower_k }
	subtract_from_variable = { energy_scheduled_blackout_population_k = energy_cutout_blackout_population_k }
	multiply_variable = { energy_scheduled_blackout_population_k = energy_debuff_factor }

	# Считаем, сколько всего населения сидит с отключенным светом
	set_variable = { energy_all_blackout_population_k = energy_cutout_blackout_population_k }
	add_to_variable = { energy_all_blackout_population_k = energy_scheduled_blackout_population_k }

	# Эффект на стабильность от энергоснабжения населения
	set_variable = { energy_blackout_stability_factor = energy_all_blackout_population_k }
	multiply_variable = { energy_blackout_stability_factor = global.energy_blackout_stability_factor }
	divide_variable = { energy_blackout_stability_factor = max_manpower_k }

	# Эффект на ускорение производства на военных заводах
	set_variable = { energy_blackout_production_factory_efficiency_gain_factor = modifier@arms_factories }
	subtract_from_variable = { energy_blackout_production_factory_efficiency_gain_factor = energy_blackout_arms_factories }
	multiply_variable = { energy_blackout_production_factory_efficiency_gain_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_production_factory_efficiency_gain_factor = energy_blackout_arms_factories }
	multiply_variable = { energy_blackout_production_factory_efficiency_gain_factor = global.energy_blackout_production_factory_efficiency_gain_factor }
	divide_variable = { energy_blackout_production_factory_efficiency_gain_factor = modifier@arms_factories }

	# Эффект на производство на военных заводы
	set_variable = { energy_blackout_industrial_capacity_factory_factor = modifier@arms_factories }
	subtract_from_variable = { energy_blackout_industrial_capacity_factory_factor = energy_blackout_arms_factories }
	multiply_variable = { energy_blackout_industrial_capacity_factory_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_industrial_capacity_factory_factor = energy_blackout_arms_factories }
	multiply_variable = { energy_blackout_industrial_capacity_factory_factor = global.energy_blackout_industrial_capacity_factory_factor }
	divide_variable = { energy_blackout_industrial_capacity_factory_factor = modifier@arms_factories }

	# Эффект на заводы боеприпасов
	set_variable = { energy_blackout_ammunition_plants_efficiency_factor = modifier@ammunition_plants }
	subtract_from_variable = { energy_blackout_ammunition_plants_efficiency_factor = energy_blackout_ammunition_plants }
	multiply_variable = { energy_blackout_ammunition_plants_efficiency_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_ammunition_plants_efficiency_factor = energy_blackout_ammunition_plants }
	multiply_variable = { energy_blackout_ammunition_plants_efficiency_factor = global.energy_blackout_ammunition_plants_efficiency_factor }
	divide_variable = { energy_blackout_ammunition_plants_efficiency_factor = modifier@ammunition_plants }

	# Эффект на гражданское строительство
	set_variable = { energy_blackout_production_speed_buildings_factor = modifier@industrial_complexes }
	subtract_from_variable = { energy_blackout_production_speed_buildings_factor = energy_blackout_industrial_complexes }
	multiply_variable = { energy_blackout_production_speed_buildings_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_production_speed_buildings_factor = energy_blackout_industrial_complexes }
	multiply_variable = { energy_blackout_production_speed_buildings_factor = global.energy_blackout_production_speed_buildings_factor }
	divide_variable = { energy_blackout_production_speed_buildings_factor = modifier@industrial_complexes }

	# Эффект на бесплатный ремонт
	set_variable = { energy_blackout_industry_free_repair_factor = modifier@industrial_complexes }
	subtract_from_variable = { energy_blackout_industry_free_repair_factor = energy_blackout_industrial_complexes }
	multiply_variable = { energy_blackout_industry_free_repair_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_industry_free_repair_factor = energy_blackout_industrial_complexes }
	multiply_variable = { energy_blackout_industry_free_repair_factor = global.energy_blackout_industry_free_repair_factor }
	divide_variable = { energy_blackout_industry_free_repair_factor = modifier@industrial_complexes }
	
	# Эффект на верфи
	set_variable = { energy_blackout_industrial_capacity_dockyard_factor = modifier@dockyards }
	subtract_from_variable = { energy_blackout_industrial_capacity_dockyard_factor = energy_blackout_dockyards }
	multiply_variable = { energy_blackout_industrial_capacity_dockyard_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_industrial_capacity_dockyard_factor = energy_blackout_dockyards }
	multiply_variable = { energy_blackout_industrial_capacity_dockyard_factor = global.energy_blackout_industrial_capacity_dockyard_factor }
	divide_variable = { energy_blackout_industrial_capacity_dockyard_factor = modifier@dockyards }

	# Эффект на НПЗ
	set_variable = { energy_blackout_production_oil_factor = modifier@synthetic_refineries }
	subtract_from_variable = { energy_blackout_production_oil_factor = energy_blackout_synthetic_refineries }
	multiply_variable = { energy_blackout_production_oil_factor = energy_debuff_factor }
	add_to_variable = { energy_blackout_production_oil_factor = energy_blackout_synthetic_refineries }
	multiply_variable = { energy_blackout_production_oil_factor = global.energy_blackout_production_oil_factor }
	divide_variable = { energy_blackout_production_oil_factor = modifier@synthetic_refineries }

}


# THIS is country scope
calculate_energy_country_consumption = {
	# Сколько тратит население (ОТКЛЮЧЕНО, Т.К. ВЫСЧИТЫВАЕТСЯ ПО СУММЕ ОТ СТЕЙТОВ)
	# set_variable = { energy_population_consumption = max_manpower_k }
	# divide_variable = { energy_population_consumption = energy_population_k_consumption_divider }
	# multiply_variable = { energy_population_consumption = energy_population_k_consumption_factor }

	# Сколько тратят постройки
	set_variable = { energy_arms_factories_consumption = modifier@arms_factories }
	multiply_variable = { energy_arms_factories_consumption = energy_arms_factory_consumption_power }
	set_variable = { energy_buildings_consumption = energy_arms_factories_consumption }

	set_variable = { energy_ammunition_plants_consumption = modifier@ammunition_plants }
	multiply_variable = { energy_ammunition_plants_consumption = energy_ammunition_plant_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_ammunition_plants_consumption }

	set_variable = { energy_industrial_complexes_consumption = modifier@industrial_complexes }
	multiply_variable = { energy_industrial_complexes_consumption = energy_industrial_complex_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_industrial_complexes_consumption }

	set_variable = { energy_dockyards_consumption = modifier@dockyards }
	multiply_variable = { energy_dockyards_consumption = energy_dockyard_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_dockyards_consumption }

	set_variable = { energy_synthetic_refineries_consumption = modifier@synthetic_refineries }
	multiply_variable = { energy_synthetic_refineries_consumption = energy_synthetic_refinery_consumption_power }
	add_to_variable = { energy_buildings_consumption = energy_synthetic_refineries_consumption }

	# Сумарные локальные затраты энергии
	set_variable = { energy_consumption = energy_population_consumption }
	add_to_variable = { energy_consumption = energy_buildings_consumption }
}

calculate_energy_country_offsite_consumption = {
	set_temp_variable = { energy_offsite_arms_factories_consumption = offsite_arms_factories }
	multiply_temp_variable = { energy_offsite_arms_factories_consumption = energy_arms_factory_consumption_power }
	add_to_variable = { energy_consumption = energy_offsite_arms_factories_consumption }

	set_temp_variable = { energy_offsite_ammunition_plants_consumption = offsite_ammunition_plants }
	multiply_temp_variable = { energy_offsite_ammunition_plants_consumption = energy_ammunition_plant_consumption_power }
	add_to_variable = { energy_consumption = energy_offsite_ammunition_plants_consumption }

	set_temp_variable = { energy_offsite_industrial_complexes_consumption = offsite_industrial_complexes }
	multiply_temp_variable = { energy_offsite_industrial_complexes_consumption = energy_industrial_complex_consumption_power }
	add_to_variable = { energy_consumption = energy_offsite_industrial_complexes_consumption }

	set_temp_variable = { energy_offsite_dockyards_consumption = offsite_dockyards }
	multiply_temp_variable = { energy_offsite_dockyards_consumption = energy_dockyard_consumption_power }
	add_to_variable = { energy_consumption = energy_dockyards_consumption }

	set_temp_variable = { energy_offsite_synthetic_refineries_consumption = offsite_synthetic_refineries }
	multiply_temp_variable = { energy_offsite_synthetic_refineries_consumption = energy_synthetic_refinery_consumption_power }
	add_to_variable = { energy_consumption = energy_synthetic_refineries_consumption }
}

calculate_energy_country_import_export = {
	if = { # Если в электросистеме недостаточно энергии
		limit = { check_variable = { energy_netto < 0 } }

		# Высчитываем максимальный множитель объёма импорта от потребления в стране
		set_temp_variable = { temp_energy_import = energy_connected_consumption }
		multiply_temp_variable = { temp_energy_import = global.energy_import_max_bound_by_consumption_factor }

		# Ограничиваем слишком маленький импорт
		clamp_temp_variable = {
			var = temp_energy_import
			min = global.energy_import_lower_soft_bound
		}

		# Высчитываем реальный дефицит энергии
		set_temp_variable = { temp_energy_deficite = energy_netto }
		multiply_temp_variable = { temp_energy_deficite = -1 }

		# Ограничиваем импорт энергии её дефицитом в стране
		clamp_temp_variable = {
			var = temp_energy_import
			min = 0
			max = temp_energy_deficite
		}

		# Добавляем данные в итоговые счётчики
		add_to_variable = { energy_netto = temp_energy_import }
		set_variable = { energy_import = temp_energy_import }
	}
	else_if = { # Если в электросистеме достаточно энергии
		limit = { check_variable = { energy_netto > 0 } }

		# Высчитываем максимальный множитель объёма экспорта от потребления в стране
		set_temp_variable = { temp_energy_export = energy_netto }
		multiply_temp_variable = { temp_energy_export = global.energy_export_by_netto_factor }

		# Добавляем данные в итоговые счётчики
		subtract_from_variable = { energy_netto = temp_energy_export }
		set_variable = { energy_export = temp_energy_export }
	}
	
}


# THIS is state scope
calculate_energy_country_generation = {
	# Сколько генерируют постройки
	set_variable = { energy_nuclear_power_plants_generation = modifier@nuclear_power_plants }
	subtract_from_variable = { energy_nuclear_power_plants_generation = energy_nuclear_power_plants_reconstruction_units }
	clamp_variable = { var = energy_nuclear_power_plants_generation min = 0 }
	multiply_variable = { energy_nuclear_power_plants_generation = energy_nuclear_power_plant_generation_power }
	set_variable = { energy_generation = energy_nuclear_power_plants_generation }

	set_variable = { energy_thermal_power_plants_generation = modifier@thermal_power_plants }
	multiply_variable = { energy_thermal_power_plants_generation = energy_thermal_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_thermal_power_plants_generation }

	set_variable = { energy_solar_power_plants_generation = modifier@solar_power_plants }
	multiply_variable = { energy_solar_power_plants_generation = energy_solar_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_solar_power_plants_generation }

	set_variable = { energy_wind_power_plants_generation = modifier@wind_power_plants }
	multiply_variable = { energy_wind_power_plants_generation = energy_wind_power_plant_generation_power }
	add_to_variable = { energy_generation = energy_wind_power_plants_generation }

	add_to_variable = { energy_generation = energy_hydro_power_plant_units_generation }

	set_variable = { energy_mobile_gas_turbine_power_plant_units_generation = energy_mobile_gas_turbine_power_plant_units }
	multiply_variable = { energy_mobile_gas_turbine_power_plant_units_generation = energy_mobile_gas_turbine_power_plant_unit_generation_power }
	add_to_variable = { energy_generation = energy_mobile_gas_turbine_power_plant_units_generation }
	add_to_variable = { energy_netto = energy_mobile_gas_turbine_power_plant_units_generation }
}

calculate_energy_country_offsite_generation = {
	set_temp_variable = { energy_offsite_nuclear_power_plants_generation = offsite_nuclear_power_plants }
	multiply_temp_variable = { energy_offsite_nuclear_power_plants_generation = energy_nuclear_power_plant_generation_power }
	add_to_variable = { energy_netto = energy_offsite_nuclear_power_plants_generation }

	set_temp_variable = { energy_offsite_thermal_power_plants_generation = offsite_thermal_power_plants }
	multiply_temp_variable = { energy_offsite_thermal_power_plants_generation = energy_thermal_power_plant_generation_power }
	add_to_variable = { energy_netto = energy_offsite_thermal_power_plants_generation }

	set_temp_variable = { energy_offsite_solar_power_plants_generation = offsite_solar_power_plants }
	multiply_temp_variable = { energy_offsite_solar_power_plants_generation = energy_solar_power_plant_generation_power }
	add_to_variable = { energy_netto = energy_offsite_solar_power_plants_generation }

	set_temp_variable = { energy_offsite_wind_power_plants_generation = offsite_wind_power_plants }
	multiply_temp_variable = { energy_offsite_wind_power_plants_generation = energy_wind_power_plant_generation_power }
	add_to_variable = { energy_netto = energy_offsite_wind_power_plants_generation }
}
