bz_update_dynamic_modifiers = {
	for_each_scope_loop = { # Цикл погранзонам THIS is BZ STATE scope
		array = global.bz_states_ids

		if = {
			limit = { owner = { original_tag = RUS } } 

			for_each_loop = { # Навешиваем на стейт дебаффы всем врагам Russia
				array = RUS.enemies
				value = enemy
				meta_effect = {
					text = {
						add_dynamic_modifier = {
							modifier = bz_speed_debuff
							scope = [ENEMY_TAG]
						}
					}
					ENEMY_TAG = "[?enemy.GetTag]"
				}
			}
		}
	}
}

bz_remove_update_tick = {
	if = {
		# Если разрешено создавать погранзоны
		limit = { NOT = { has_global_flag = RUS_ban_border_zones_flag } }

		for_each_scope_loop = { # Цикл по пограничным зонам
			array = global.bz_states_ids

			if = {
				limit = { owner = { has_country_flag = is_bz_country }}
				bz_remove_if_needed = yes
			}
		}
	}
}

# THIS scope is BZ STATE
bz_remove_if_needed = {
	set_temp_variable = { temp_different_control = 0 }
	set_temp_variable = { temp_province_id = bz_second_adjacent_states_provinces_ids^0 }
	set_temp_variable = { temp_province_controller = global.province_controllers^temp_province_id }
	for_each_loop = {
		array = bz_second_adjacent_states_provinces_ids
		value = temp_province_id
		break = temp_is_different_control

		if = {
			limit = { NOT = { check_variable = { temp_province_controller = global.province_controllers^temp_province_id } } }
			add_to_temp_variable = { temp_is_different_control = 1 }
		}
	}

	if = { # Если все значащие провинции вокруг погранзоны контролируются одной страной
		limit = { check_variable = { temp_is_different_control = 0 } }

		if = { # И контроллер это не настоящий владелец погранзоны
			limit = { NOT = { check_variable = { bz_owner = temp_province_controller }} }

			# То делаем погранзону прорванной
			add_dynamic_modifier = { modifier = bz_state_breakthrough }
		}
		meta_effect = {
			text = { transfer_state_to = [COUNTRY_TAG] }
			COUNTRY_TAG = "[?temp_province_controller.GetTag]"
		}
	}
}


# THIS scope is COUNTRY
bz_daily_update_tick = {
	if = {
		# Если разрешено создавать погранзоны
		limit = { NOT = { has_global_flag = RUS_ban_border_zones_flag } }

		for_each_scope_loop = { # Цикл по пограничным зонам
			array = global.bz_states_ids

			set_temp_variable = { bz_state = THIS }
			
			if = { # Если недавно погранзона была прорвана
				limit = { has_dynamic_modifier = { modifier = bz_state_breakthrough } }
				bz_tick_disabled_creation_state = yes
			}
			else = {
				bz_tick_enabled_creation_state = yes
			}
		}
	}
}

# Эффект для обработки случая погранзоны, которая была прорвана врагом
# PREV scope is COUNTRY
# THIS scope is BZ STATE
bz_tick_disabled_creation_state = {
	if = {
		limit = {
			NOT = { has_dynamic_modifier = { modifier = bz_recent_breakthrough } }
			meta_trigger = {
				text = {
					[BZ_OWNER_TAG] = { has_full_control_of_state = [STATE_ID] }
				}
				BZ_OWNER_TAG = "[?bz_owner.GetTag]"
				STATE_ID = "[?THIS.GetID]"
			}
		}

		remove_dynamic_modifier = { modifier = bz_state_breakthrough }
	}
}

# Эффект для обработки случая обычной погранзоны
# PREV scope is COUNTRY
# THIS scope is BZ STATE
bz_tick_enabled_creation_state = {
	if = { # Если владелец погранзоны полностью не контролирует её
		limit = { 
			NOT = { PREV = { has_full_control_of_state = bz_state } }
		}

		remove_dynamic_modifier = { modifier = bz_speed_debuff }

		# Передаём погранзону её владельцу
		if = {
			limit = { check_variable = { bz_owner = RUS } }
			transfer_state_to = RBZ
		}
		else_if = {
			limit = { check_variable = { bz_owner = BLR } }
			transfer_state_to = BLR
		}

	}
}