types = {
    # energy_sector_missile_strike = {
    #     category = on_energy_infrastructure_strikes
    #     command_power = 1
    #     arrow = { type = air }
    #     unit_model = { type = equipment }

    #     # AI блок
    #     ai_will_do = {
    #         # Логика AI может быть добавлена здесь
    #     }

    #     # Время подготовки и повторного использования
    #     days_to_prepare = 1
    #     days_re_enable = 1

    #     # Видимость
    #     visible = {
    #         # Условия видимости могут быть добавлены здесь
    #     }

    #     # Условия отображения цели
    #     show_target = {
    #         NOT = { is_in_faction_with = FROM }
    #         has_war = yes
    #     }

    #     # Условия доступности
    #     available = {
    #         has_war_with = FROM
    #     }

    #     # Условия запуска
    #     launchable = {
    #         has_war_with = FROM
    #     }

    #     # Звук запуска
    #     launch_sound = raid_launch_marine

    #     # Иконка цели
    #     target_icon = GFX_other_target_icon

    #     # Тип цели
    #     target_type = {
    #         state = {
    #             OR = {
    #                 wind_power_plant > 0
    #                 solar_power_plant > 0
    #                 thermal_power_plant > 0
    #                 electrical_substation_big > 0
    #                 electrical_substation > 0
    #             }
    #         }
    #     }

    #     # Точка запуска
    #     starting_point = { types = {air_base} }

    #     # Требования к юнитам
    #     unit_requirements = {
	# 		equipment = {
	# 			type = { strategic_bomber }
	# 			amount = {
	# 				min = 1
	# 				max = 24
	# 			}
	# 		}
    #     }

    #     # Уровни успеха
    #     success_levels = {
    #         failure = {
    #             actor_effects = {
    #                 var:actor_country = {
    #                     air_experience = -10
    #                 }
    #             }
    #             victim_effects = {
    #                 var:victim_country = {
    #                     air_experience = 10
    #                 }
    #             }
    #         }
    #         limited_success = {
    #             actor_effects = {
    #                 var:actor_country = {
    #                     air_experience = 5
    #                 }
    #             }
    #             victim_effects = {
    #                 var:victim_country = {
    #                     air_experience = 10
    #                 }
	# 				# target_effects = {
	# 				# electrical_substation_big = 0.25
	# 				# electrical_substation = 0.25
	# 				# thermal_power_plant = 0.25
	# 				# solar_power_plant = 0.25
	# 				# wind_power_plant = 0.25
	# 				# }
    #             }
    #         }
    #         success = {
    #             actor_effects = {
    #                 var:actor_country = {
    #                     air_experience = 10
    #                 }
    #             }
    #             victim_effects = {
    #                 var:victim_country = {
    #                     air_experience = 10
    #                 }
    #             }
    #             # target_effects = {
    #             #     electrical_substation_big = 0.50
    #             #     electrical_substation = 0.50
    #             #     thermal_power_plant = 0.50
    #             #     solar_power_plant = 0.50
    #             #     wind_power_plant = 0.50
    #             # }
    #         }
    #         critical_success = {
    #             actor_effects = {
    #                 var:actor_country = {
    #                     air_experience = 15
    #                 }
    #             }
    #             victim_effects = {
    #                 var:victim_country = {
    #                     air_experience = 10
    #                 }
    #             }
    #             # target_effects = {
    #             #     electrical_substation_big = 1.0
    #             #     electrical_substation = 1.0
    #             #     thermal_power_plant = 1.0
    #             #     solar_power_plant = 1.0
    #             #     wind_power_plant = 1.0
    #             # }
    #         }
    #     }

    #     # Факторы успеха
    #     success_factors = {
    #         success = { base = 0.5 }
    #         critical = { base = 0.25 }
    #         disaster = { base = 0.25 }
    #     }
    # }

	arms_industry_strike = {
		days_to_prepare = 1
		days_re_enable = 1
		category = critical_military_infrastructure_strikes
		command_power = 20
		# ai_will_do = {

		# }
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		show_target = {
			has_war_with = FROM
		}
		available = {
			has_war_with = FROM
		}
		launchable = {
			has_war_with = FROM
		}
		unit_requirements = {
			equipment = {
				type = { cas }
				amount = {min = 2}
			}
		}
		unit_requirements = {
			equipment = {
				type = { rus_ballistic_missile_equipment }
				amount = { min = 1 }
			}
		}
		launch_sound = raid_launch_marine
		target_icon = GFX_other_target_icon
		target_type = {
			state = {
				OR = {
					arms_factory > 0
					ammunition_plant > 0
					ammunition_silo > 0
				}
			}
		}
		starting_point = {
			types = {air_base rocket_site}
		}
		success_factors = {
            success = { base = 0.5 }
            critical = { base = 0.25 }
            disaster = { base = 0.25 }
        }
		success_levels = {
            failure = {
                actor_effects = {
					#Random plane loss starting value. The max value will vary based on the success level
					set_temp_variable = { raid_planes_lost = 0 }

					set_temp_variable_to_random = {
						var = raid_planes_lost
						max = 2
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}

					if = { limit = { check_variable = { aa_defense = 0 } } add_to_temp_variable = { aa_defense = 1 } }

					multiply_temp_variable = { raid_planes_lost = aa_defense }

					#if at war, increase the losses, varying based on raid success
					if = {
						limit = {
							var:actor_country = { has_war_with = var:ROOT.victim_country }
						}
						multiply_temp_variable = { raid_planes_lost = 1.5 }
					} else = {
						#66% chance on dead planes here, since raid was a failure
						set_temp_variable_to_random = {
							var = random_chance_on_dead_planes
							max = 1
							integer = yes
						}
						if = { limit = { check_variable = { random_chance_on_dead_planes = 1 } } subtract_from_temp_variable = { random_chance_on_dead_planes = 1 } }
						multiply_temp_variable = { raid_planes_lost = random_chance_on_dead_planes }
					}

					#clamp after round, just in case some black magic made this negative
					clamp_temp_variable = {
						var = raid_planes_lost
						min = 0
					}

					round_temp_variable = raid_planes_lost

					hidden_effect = {
						raid_damage_units = {
							plane_loss = raid_planes_lost
							ratio = no
						}
					}

					# custom_effect_tooltip = {
					# 	localization_key = plane_raid_losses_tt
					# 	LOSSES = [?raid_planes_lost]
					# }
					#remove political power if the nation is not a war with the target
					var:actor_country = {
						if = {
							limit = {
								NOT = { has_war_with = var:ROOT.victim_country }
							}
							add_political_power = -100
						}
					}
                }
                victim_effects = {
					if = {
						limit = {
							NOT = { var:actor_country = { has_war_with = var:ROOT.victim_country } }
						}
						hidden_effect = {
							var:actor_country = {
								set_variable = { THIS.target_country = var:ROOT.victim_country }
								set_variable = { THIS.actor_country = var:ROOT.hostile_country }
							}
						}
					}
                }
            }
            limited_success = {
                actor_effects = {
					#Random plane loss starting value. The max value will vary based on the success level
					set_temp_variable = { raid_planes_lost = 0 }

					set_temp_variable_to_random = {
						var = raid_planes_lost
						max = 5
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}

					multiply_temp_variable = { raid_planes_lost = aa_defense }

					#if at war, increase the losses, varying based on raid success
					if = {
						limit = {
							var:actor_country = { has_war_with = var:ROOT.victim_country }
						}
						multiply_temp_variable = { raid_planes_lost = 1.25 }
					} else = {
						#50% chance on dead planes here, since raid was a limited success
						set_temp_variable_to_random = {
							var = random_chance_on_dead_planes
							max = 1
							integer = yes
						}
						multiply_temp_variable = { raid_planes_lost = random_chance_on_dead_planes }
					}

					#clamp after round, just in case some black magic made this negative
					clamp_temp_variable = {
						var = raid_planes_lost
						min = 0
					}

					round_temp_variable = raid_planes_lost

					hidden_effect = {
						raid_damage_units = {
							plane_loss = raid_planes_lost
							ratio = no
						}
					}

					custom_effect_tooltip = {
						localization_key = plane_raid_losses_tt
						LOSSES = [?raid_planes_lost]
					}
					#remove political power if the nation is not a war with the target
					var:actor_country = {
						if = {
							limit = {
								NOT = { has_war_with = var:ROOT.victim_country }
							}
							add_political_power = -100
						}
					}
                }
                victim_effects = {
					if = {
						limit = {
							NOT = { var:actor_country = { has_war_with = var:ROOT.victim_country } }
						}
						hidden_effect = {
							var:actor_country = {
								set_variable = { THIS.target_country = var:ROOT.victim_country }
								set_variable = { THIS.actor_country = var:ROOT.hostile_country }
								country_event = {
									id = MD_raid.8
								}
							}
						}
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
						set_temp_variable = { ROOT.num_fuel_silos = THIS.building_level@fuel_silo }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}
					#scale this based on success level
					set_temp_variable = { building_damage_by_missile = 1.25 }

					set_temp_variable_to_random = {
						var = missile_luck_mod
						min = 0.4
						max = 0.6
					}

					multiply_temp_variable = { building_damage_by_missile = missile_luck_mod }

					if = {
						limit = {
							check_variable = { aa_defense > 0 }
						}
						divide_temp_variable = { building_damage_by_missile = aa_defense }
					}

					multiply_temp_variable = { building_damage_by_missile = 10 }

					clamp_temp_variable = {
						var = building_damage_by_missile
						max = num_fuel_silos
					}

					#if the state has oil wells to target as well, reduce the number of missiles going after buildings
					#Otherwise, the missiles will just bum rush the storage and kill that instead
					var:target_state = {
						if = { limit = { arms_factory > 0 }
							set_temp_variable = { arms_factory = THIS.buildings@arms_factory }
							multiply_temp_variable = { arms_factory = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = arms_factory }
						}
						if = { limit = { ammunition_plant > 0 }
							set_temp_variable = { ammunition_plant = THIS.buildings@ammunition_plant }
							multiply_temp_variable = { ammunition_plant = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_plant }
						}
						if = { limit = { ammunition_silo > 0 }
							set_temp_variable = { ammunition_silo = THIS.buildings@ammunition_silo }
							multiply_temp_variable = { ammunition_silo = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_silo }
						}
					}

					#ensure any raid does a minium of 1 damage
					if = { limit = { check_variable = { building_damage_by_missile < 1 } } set_temp_variable = { building_damage_by_missile = 1.25 } }

					#apply the damage to the proper building
					var:target_state = {
						if = { limit = { fuel_silo > 0 }
							meta_effect = {
								text = {
									damage_building = {
										type = fuel_silo
										damage = [DAM] # levels of damage
									}
								}
								DAM = "[?building_damage_by_missile]"
							}
						}
					}
                }
            }
            success = {
                actor_effects = {
					#Random plane loss starting value. The max value will vary based on the success level
					set_temp_variable = { raid_planes_lost = 0 }

					set_temp_variable_to_random = {
						var = raid_planes_lost
						max = 3
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}

					multiply_temp_variable = { raid_planes_lost = aa_defense }

					#if at war, increase the losses, varying based on raid success
					if = {
						limit = {
							var:actor_country = { has_war_with = var:ROOT.victim_country }
						}
						multiply_temp_variable = { raid_planes_lost = 1.15 }
					} else = {
						#33% chance on dead planes here
						set_temp_variable_to_random = {
							var = random_chance_on_dead_planes
							max = 1
							integer = yes
						}
						if = { limit = { NOT = { check_variable = { random_chance_on_dead_planes = 1 } } } set_temp_variable = { random_chance_on_dead_planes = 0 } }
						multiply_temp_variable = { raid_planes_lost = random_chance_on_dead_planes }
					}

					#clamp after round, just in case some black magic made this negative
					clamp_temp_variable = {
						var = raid_planes_lost
						min = 0
					}

					round_temp_variable = raid_planes_lost

					hidden_effect = {
						raid_damage_units = {
							plane_loss = raid_planes_lost
							ratio = no
						}
					}

					custom_effect_tooltip = {
						localization_key = plane_raid_losses_tt
						LOSSES = [?raid_planes_lost]
					}
					#remove political power if the nation is not a war with the target
					var:actor_country = {
						if = {
							limit = {
								NOT = { has_war_with = var:ROOT.victim_country }
							}
							add_political_power = -100
						}
					}
                }
                victim_effects = {
					if = {
						limit = {
							NOT = { var:actor_country = { has_war_with = var:ROOT.victim_country } }
						}
						hidden_effect = {
							var:actor_country = {
								set_variable = { THIS.target_country = var:ROOT.victim_country }
								set_variable = { THIS.actor_country = var:ROOT.hostile_country }
								country_event = {
									id = MD_raid.8
								}
							}
						}
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
						set_temp_variable = { ROOT.num_fuel_silos = THIS.building_level@fuel_silo }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}
					#scale this based on success level
					set_temp_variable = { building_damage_by_missile = 1.25 }

					set_temp_variable_to_random = {
						var = missile_luck_mod
						min = 0.6
						max = 0.8
					}

					multiply_temp_variable = { building_damage_by_missile = missile_luck_mod }

					if = {
						limit = {
							check_variable = { aa_defense > 0 }
						}
						divide_temp_variable = { building_damage_by_missile = aa_defense }
					}

					multiply_temp_variable = { building_damage_by_missile = 10 }

					clamp_temp_variable = {
						var = building_damage_by_missile
						max = num_fuel_silos
					}

					#if the state has oil wells to target as well, reduce the number of missiles going after buildings
					#Otherwise, the missiles will just bum rush the storage and kill that instead
					var:target_state = {
						if = { limit = { arms_factory > 0 }
						set_temp_variable = { arms_factory = THIS.buildings@arms_factory }
						multiply_temp_variable = { arms_factory = 0.75 }
						divide_temp_variable = { ROOT.building_damage_by_missile = arms_factory }
						}
						if = { limit = { ammunition_plant > 0 }
							set_temp_variable = { ammunition_plant = THIS.buildings@ammunition_plant }
							multiply_temp_variable = { ammunition_plant = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_plant }
						}
						if = { limit = { ammunition_silo > 0 }
							set_temp_variable = { ammunition_silo = THIS.buildings@ammunition_silo }
							multiply_temp_variable = { ammunition_silo = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_silo }
						}
					}

					#ensure any raid does a minium of 1 damage
					if = { limit = { check_variable = { building_damage_by_missile < 1 } } set_temp_variable = { building_damage_by_missile = 1.25 } }

					#apply the damage to the proper building
					var:target_state = {
						if = { limit = { fuel_silo > 0 }
							meta_effect = {
								text = {
									damage_building = {
										type = fuel_silo
										damage = [DAM] # levels of damage
									}
								}
								DAM = "[?building_damage_by_missile]"
							}
						}
					}
                }
            }
            critical_success = {
                actor_effects = {
					#Random plane loss starting value. The max value will vary based on the success level
					set_temp_variable = { raid_planes_lost = 0 }

					set_temp_variable_to_random = {
						var = raid_planes_lost
						max = 2
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}

					multiply_temp_variable = { raid_planes_lost = aa_defense }

					#if at war, reduce the losses cause critical success rewards you
					if = {
						limit = {
							var:actor_country = { has_war_with = var:ROOT.victim_country }
						}
						multiply_temp_variable = { raid_planes_lost = 0.95 }
					} else = {
						#randomize how many fewer planes lost due to critical success
						set_temp_variable_to_random = {
							var = random_chance_on_dead_planes
							max = 1
						}
						multiply_temp_variable = { raid_planes_lost = random_chance_on_dead_planes }
					}

					#clamp after round, just in case some black magic made this negative
					clamp_temp_variable = {
						var = raid_planes_lost
						min = 0
					}

					round_temp_variable = raid_planes_lost

					hidden_effect = {
						raid_damage_units = {
							plane_loss = raid_planes_lost
							ratio = no
						}
					}

					custom_effect_tooltip = {
						localization_key = plane_raid_losses_tt
						LOSSES = [?raid_planes_lost]
					}
					#remove political power if the nation is not a war with the target
					var:actor_country = {
						if = {
							limit = {
								NOT = { has_war_with = var:ROOT.victim_country }
							}
							add_political_power = -100
						}
					}
                }
                victim_effects = {
					if = {
						limit = {
							NOT = { var:actor_country = { has_war_with = var:ROOT.victim_country } }
						}
						hidden_effect = {
							var:actor_country = {
								set_variable = { THIS.target_country = var:ROOT.victim_country }
								set_variable = { THIS.actor_country = var:ROOT.hostile_country }
								country_event = {
									id = MD_raid.8
								}
							}
						}
					}

					var:target_state = {
						set_temp_variable = { ROOT.aa_defense = THIS.non_damaged_building_level@anti_air_building }
						set_temp_variable = { ROOT.radar_mult = THIS.non_damaged_building_level@radar_station }
						set_temp_variable = { ROOT.rocket_mult = THIS.non_damaged_building_level@rocket_site }
						set_temp_variable = { ROOT.num_fuel_silos = THIS.building_level@fuel_silo }
					}

					add_to_temp_variable = { radar_mult = 0.5 }
					multiply_temp_variable = { aa_defense = radar_mult }
					multiply_temp_variable = { rocket_mult = radar_mult }

					if = {
						limit = {
							NOT = { check_variable = { rocket_mult = 0 } }
						}
						multiply_temp_variable = { aa_defense = rocket_mult }

						if = {
							limit = {
								check_variable = { aa_defense = 0 }
							}
							add_to_temp_variable = { aa_defense = rocket_mult }
						}
					}
					#scale this based on success level
					set_temp_variable = { building_damage_by_missile = 1.25 }

					set_temp_variable_to_random = {
						var = missile_luck_mod
						min = 0.8
						max = 1
					}

					multiply_temp_variable = { building_damage_by_missile = missile_luck_mod }

					if = {
						limit = {
							check_variable = { aa_defense > 0 }
						}
						divide_temp_variable = { building_damage_by_missile = aa_defense }
					}

					multiply_temp_variable = { building_damage_by_missile = 10 }

					clamp_temp_variable = {
						var = building_damage_by_missile
						max = num_fuel_silos
					}

					#if the state has oil wells to target as well, reduce the number of missiles going after buildings
					#Otherwise, the missiles will just bum rush the storage and kill that instead
					var:target_state = {
						if = { limit = { arms_factory > 0 }
							set_temp_variable = { arms_factory = THIS.buildings@arms_factory }
							multiply_temp_variable = { arms_factory = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = arms_factory }
						}
						if = { limit = { ammunition_plant > 0 }
							set_temp_variable = { ammunition_plant = THIS.buildings@ammunition_plant }
							multiply_temp_variable = { ammunition_plant = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_plant }
						}
						if = { limit = { ammunition_silo > 0 }
							set_temp_variable = { ammunition_silo = THIS.buildings@ammunition_silo }
							multiply_temp_variable = { ammunition_silo = 0.75 }
							divide_temp_variable = { ROOT.building_damage_by_missile = ammunition_silo }
						}
					}

					#ensure any raid does a minium of 1 damage
					if = { limit = { check_variable = { building_damage_by_missile < 1 } } set_temp_variable = { building_damage_by_missile = 1.25 } }

					#apply the damage to the proper building
					var:target_state = {
						if = { limit = { fuel_silo > 0 }
							meta_effect = {
								text = {
									damage_building = {
										type = fuel_silo
										damage = [DAM] # levels of damage
									}
								}
								DAM = "[?building_damage_by_missile]"
							}
						}
					}
                }
            }
        }
	}
}